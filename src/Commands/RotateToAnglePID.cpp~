// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RotateToAnglePID.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

RotateToAnglePID::RotateToAnglePID(double angle): Command() {
    m_angle = angle;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveBasePID.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void RotateToAnglePID::Initialize() {
	Robot::driveBasePID->RotateInit(m_angle);
	SetTimeout(5);
}

// Called repeatedly when this Command is scheduled to run
void RotateToAnglePID::Execute() {
	SmartDashboard::PutString("DB/String 0", "Want Angle: " + std::to_string(m_angle));
	SmartDashboard::PutString("DB/String 1", "Curr. Yaw: " + std::to_string(RobotMap::ahrs->GetYaw()));

}

// Make this return true when this Command no longer needs to run execute()
bool RotateToAnglePID::IsFinished() {
    if (IsTimedOut())
    	return true;
    return false;

}

// Called once after isFinished returns true
void RotateToAnglePID::End() {
	Robot::driveBasePID->PIDControlDisable();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RotateToAnglePID::Interrupted() {
	Robot::driveBasePID->PIDControlDisable();
}
